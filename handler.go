package translate

import (
  "fmt"
  "log"

  "github.com/bwmarrin/discordgo"
)

// handleReaction handles reactions to translate messages.
func (b *Bot) handleReaction(s *discordgo.Session, r *discordgo.MessageReactionAdd) {
  target, ok := flags[r.Emoji.Name]
  if !ok {
    return // not a flag or not mapped
  }
  m, err := s.ChannelMessage(r.ChannelID, r.MessageID)
  if err != nil {
    log.Printf("Message(%v, %v) error: %v", r.ChannelID, r.MessageID, err)
    return
  }
  content, err := m.ContentWithMoreMentionsReplaced(s)
  if err != nil {
    log.Printf("ContentWithMoreMentionsReplaced(%q) error: %v", m.Content, err)
    return
  }
  source, text, err := translate(b.apiKey, target, content)
  if err != nil {
    log.Printf("translate(%v, %q) error: %v", target, content, err)
    return
  }
  name := m.Author.Username
  // if message was generated by a webhook, there is no member to fetch
  if m.WebhookID == "" {
    member, err := s.GuildMember(r.GuildID, m.Author.ID)
    if err != nil {
      log.Printf("Member(%v, %v, %q) error: %v", r.GuildID, m.Author.ID, name, err)
      return
    }
    if member.Nick != "" {
      name = member.Nick
    }
  }
  embed := &discordgo.MessageEmbed{
    Type: discordgo.EmbedTypeRich,
    Author: &discordgo.MessageEmbedAuthor{
      Name:    name,
      IconURL: m.Author.AvatarURL("128"),
    },
    Description: text,
    Footer: &discordgo.MessageEmbedFooter{
      Text: fmt.Sprintf("%v (%v) â†’ %v (%v)", languages[source], source, languages[target], target),
    },
  }
  if _, err := s.ChannelMessageSendEmbed(r.ChannelID, embed); err != nil {
    log.Printf("ChannelMessageSend(%q) error: %v", text, err)
    return
  }
}
